This is a list of ideas that would require significant work. In no particular
order:

1. Improve find UI. The one I like the best is in Chrome browser (with 
modification needed for specyfing search parameters like case sensitivity
and additions like 'match whole words' modifier). Another nice implementation
is in Kindle PC reader.
We could then free up significant amount of space in the toolbar.

2. Screen space is always at premium and most PDFs have very wasteful
margins. Good Reader has a really nice feature for manual cropping of margins
(http://www.goodiware.com/gr-man-view-pdf.html#crop). They have a mode for
manually selecting visible part of the PDF, similar to how many graphics
program implement cropping. Cropping can be set for all pages or separately
for odd/even pages. Cropping can also be reset. After cropping, the program
only shows the non-cropped part. This would be especially valuable for small
screens (netbooks/small laptops).

Note: Automatic cropping is currently implemented as "Fit Content" View mode.

3. Editing/saving of PDF forms. Many people want that.

4. Add integration with web-based backup/viewer system. The idea is that users
could easily backup their PDFs on the server. They would have a convenient
access to those PDFs from Sumatra as well as being able to view them on the
web. Basically it would be private Scribd for PDFs only. The web service
would have to be paid (since on-line storage is rather expensive) but there
would be free accounts (with quota, similar to how Dropbox works).

5. As an alternative (or addition) to 5., integration with Scribd i.e. being
able to search for PDF documents on Scribd and download/view them in Sumatra.
They have APIs (http://www.scribd.com/developers).

6. Direct integration with Dropbox (they have APIs) i.e. being able to list,
download and read PDF files in Dropbox account. Not sure if that makes sense,
though, since having Dropbox pretty much means the files are locally anyway.

7. Document library management similar to how e.g. Picasa manages photos or iTunes
manages mp3 files.

User would tell us which directories contain PDF and oher supported files
(or, on Win 7, we could use windows search or scan the whole hard-drive to 
automatically find all files). We would index the files (their filenames, metadata,
maybe extract text for full-text search), build thumbnails and allow efficient 
browsing/searching those files.

This would be a good feature for those who have large collections of PDFs
(compared to using file explorer or open file dialog for locating the file).

8. To make translating Sumatra even easier on translators, a web service
(built on App Engine because it's capable enough and simplest to
deploy) allowing people to translate program strings (it wouldn't be
limited to Sumatra (others could setup their own projects for translation).

It would have an API for project owners to upload the strings to translate
and download translations as well as web UI to add/modify strings to translate.

Translators could add/modify translations for their language. We would keep
full history of edits, to make reverts easy. We would never delete translations
(they could be marked as no longer used but we would keep them and their
translations in case they are used again).

All translations would be in public domain (translators would have to agree
to that) to make it easy on project owners.

System would be smart enough to suggest translations across project i.e.
if a given string is already translated in project A, there should be an
easy way to copy those translations to project B.

Translators (and project owners) would have to sign in with their google
credentials (to prevent vandalism and easy revert of rogue translator's translations).

Anonymous users could suggest translations but they would have to be approved
by a signed-in translator or project admin.

We would auto-generate a translation contribution page (like
http://blog.kowalczyk.info/software/sumatrapdf/translators.html) so that
project owners can give credit to their translators. A translator
could opt-out from being listed there.

The big idea is to make contributing a translation as easy as possible.
Our system is as easy as I could make it but not easy in the absolute sense.

The code would of course be open-source.

10. Native client version (https://developers.google.com/native-client/).

There are some challenges (need completely custom UI, fonts aren't as easy
to get at, CHM support would be much harder). The upside is we would have
no-install, browser hosted (well, at least in Chrome) app.
