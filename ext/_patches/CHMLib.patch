diff -rPu5 CHMLib.orig\src\chm_lib.c CHMLib\src\chm_lib.c
--- CHMLib.orig\src\chm_lib.c	Thu Jul 02 23:34:54 2009
+++ CHMLib\src\chm_lib.c	Sun Apr 29 11:26:37 2012
@@ -92,11 +92,11 @@
 #ifdef WIN32
 #define CHM_ACQUIRE_LOCK(a) do {                        \
         EnterCriticalSection(&(a));                     \
     } while(0)
 #define CHM_RELEASE_LOCK(a) do {                        \
-        EnterCriticalSection(&(a));                     \
+        LeaveCriticalSection(&(a));                     \
     } while(0)
 
 #else
 #include <pthread.h>
 
@@ -410,10 +410,14 @@
             return 0;
     }
     else
         dest->data_offset = dest->dir_offset + dest->dir_len;
 
+    /* SumatraPDF: sanity check (huge values are usually due to broken files) */
+    if (dest->dir_offset > UINT_MAX || dest->dir_len > UINT_MAX)
+        return 0;
+
     return 1;
 }
 
 /* structure of ITSP headers */
 #define _CHM_ITSP_V1_LEN (0x54)
@@ -466,10 +470,13 @@
         return 0;
     if (dest->version != 1)
         return 0;
     if (dest->header_len != _CHM_ITSP_V1_LEN)
         return 0;
+    /* SumatraPDF: sanity check */
+    if (dest->block_len == 0)
+        return 0;
 
     return 1;
 }
 
 /* structure of PMGL headers */
@@ -565,10 +572,15 @@
     _unmarshal_uint64    (pData, pDataLen, &dest->block_len);
 
     /* check structure */
     if (dest->version != 2)
         return 0;
+    /* SumatraPDF: sanity check (huge values are usually due to broken files) */
+    if (dest->uncompressed_len > UINT_MAX || dest->compressed_len > UINT_MAX)
+        return 0;
+    if (dest->block_len == 0 || dest->block_len > UINT_MAX)
+        return 0;
 
     return 1;
 }
 
 /* structure of LZXC control data block */
@@ -936,10 +948,12 @@
             !_unmarshal_lzxc_control_data(&sbufpos, &sremain,
                                           &ctlData))
         {
             newHandle->compression_enabled = 0;
         }
+        else /* SumatraPDF: prevent division by zero */
+        {
 
         newHandle->window_size = ctlData.windowSize;
         newHandle->reset_interval = ctlData.resetInterval;
 
 /* Jed, Mon Jun 28: Experimentally, it appears that the reset block count */
@@ -951,10 +965,11 @@
 #else
         newHandle->reset_blkcount = newHandle->reset_interval    /
                                     (newHandle->window_size / 2) *
                                     ctlData.windowsPerReset;
 #endif
+        }
     }
 
     /* initialize cache */
     chm_set_param(newHandle, CHM_PARAM_MAX_BLOCKS_CACHED,
                   CHM_MAX_BLOCKS_CACHED);
@@ -1543,10 +1558,16 @@
         h->lzx_state = LZXinit(window_size);
     }
 
     /* decompress some data */
     gotLen = _chm_decompress_block(h, nBlock, &ubuffer);
+    /* SumatraPDF: check return value */
+    if (gotLen == (UInt64)-1)
+    {
+        CHM_RELEASE_LOCK(h->lzx_mutex);
+        return 0;
+    }
     if (gotLen < nLen)
         nLen = gotLen;
     memcpy(buf, ubuffer+nOffset, (unsigned int)nLen);
     CHM_RELEASE_LOCK(h->lzx_mutex);
     return nLen;
