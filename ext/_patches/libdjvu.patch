diff -rPu5 libdjvu.orig\DataPool.cpp libdjvu\DataPool.cpp
--- libdjvu.orig\DataPool.cpp	Thu Mar 15 23:45:44 2012
+++ libdjvu\DataPool.cpp	Sat Mar 17 12:11:56 2012
@@ -1358,13 +1358,10 @@
 	 // the "pool->restart_readers()" will not restart it. So we're going
 	 // to continue issuing this command until we get rid of all
 	 // "active_readers"
       while(*active_readers)
       {
-#if (THREADMODEL==COTHREADS) || (THREADMODEL==MACTHREADS)
-	 GThread::yield();
-#endif
 	 pool->restart_readers();
       }
    }
 }
 
diff -rPu5 libdjvu.orig\DjVuGlobal.h libdjvu\DjVuGlobal.h
--- libdjvu.orig\DjVuGlobal.h	Thu Mar 15 23:45:44 2012
+++ libdjvu\DjVuGlobal.h	Sat Mar 17 11:58:56 2012
@@ -70,11 +70,12 @@
 # include <new>
 #else
 # include <new.h>
 #endif
 
-#ifdef WIN32
+// SumatraPDF: allow to build as a static library (built-in)
+#ifdef WIN32_AND_NOT_STATIC
 # ifdef DLL_EXPORT
 #  define DJVUAPI __declspec(dllexport)
 # else
 #  define DJVUAPI __declspec(dllimport)
 # endif
diff -rPu5 libdjvu.orig\GString.h libdjvu\GString.h
--- libdjvu.orig\GString.h	Thu Mar 15 23:45:44 2012
+++ libdjvu\GString.h	Sat Mar 17 11:59:49 2012
@@ -113,11 +113,13 @@
 #include <stdarg.h>
 #ifdef WIN32
 # include <windows.h>
 # define HAS_WCHAR 1
 # define HAS_WCTYPE 1
-# define HAS_MBSTATE 1
+// SumatraPDF: disable HAS_MBSTATE so that it doesn't use mbrlen() etc.
+// so that we don't have to implement them in ucrt
+# define HAS_MBSTATE 0
 #endif
 
 #if HAS_WCHAR
 # if !defined(AUTOCONF) || HAVE_WCHAR_H
 #  include <wchar.h>
diff -rPu5 libdjvu.orig\GThreads.h libdjvu\GThreads.h
--- libdjvu.orig\GThreads.h	Thu Mar 15 23:45:44 2012
+++ libdjvu\GThreads.h	Sat Mar 17 12:11:45 2012
@@ -133,14 +133,10 @@
 #define WIN32_LEAN_AND_MEAN
 #include "windows.h"
 #endif
 #endif
 
-#if THREADMODEL==MACTHREADS
-#include <threads.h>
-#endif
-
 #if THREADMODEL==POSIXTHREADS
 #include <sys/types.h>
 #include <sys/time.h>
 #include <unistd.h>
 #undef TRY
diff -rPu5 libdjvu.orig\miniexp.cpp libdjvu\miniexp.cpp
--- libdjvu.orig\miniexp.cpp	Thu Mar 15 23:45:44 2012
+++ libdjvu\miniexp.cpp	Sat Mar 17 15:20:17 2012
@@ -901,11 +901,12 @@
 }
 
 int 
 miniexp_stringp(miniexp_t p)
 {
-  return miniexp_isa(p, ministring_t::classname) ? 1 : 0;
+  // SumatraPDF: don't execute code until asked to
+  return miniexp_isa(p, miniexp_symbol("string")) ? 1 : 0;
 }
 
 const char *
 miniexp_to_str(miniexp_t p)
 {
@@ -1614,11 +1615,12 @@
         {
           return read_quoted_symbol(io, c);
         }
       else if (c == '#')
         {
-          return read_error(io, c);
+          /* SumatraPDF: this is a color value: #RRGGBB */
+          return read_symbol_or_number(io, c);
         }
       else if (io->p_macrochar && io->p_macroqueue 
                && c >= 0 && c < 128 
                && io->p_macrochar[c])
         {
diff -rPu5 libdjvu.orig\miniexp.h libdjvu\miniexp.h
--- libdjvu.orig\miniexp.h	Thu Mar 15 23:45:44 2012
+++ libdjvu\miniexp.h	Sat Mar 17 12:07:32 2012
@@ -667,15 +667,16 @@
   public: static const miniexp_t classname; \
           virtual miniexp_t classof() const; \
           virtual bool isa(miniexp_t) const; 
 
 #define MINIOBJ_IMPLEMENT(cls, supercls, name)\
-  const miniexp_t cls::classname = miniexp_symbol(name);\
+  /* SumatraPDF: don't execute code until asked to */\
+  const miniexp_t cls::classname = 0;\
   miniexp_t cls::classof() const {\
-    return cls::classname; }\
+    return miniexp_symbol(name); }\
   bool cls::isa(miniexp_t n) const {\
-    return (cls::classname==n) || (supercls::isa(n)); }
+    return (classof()==n) || (supercls::isa(n)); }
 
 
 /* miniexp_to_obj --
    Returns a pointer to the object represented by an lisp
    expression. Returns NULL if the expression is not an
