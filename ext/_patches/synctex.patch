diff -rPu5 synctex.orig\synctex_parser.c synctex\synctex_parser.c
--- synctex.orig\synctex_parser.c	Tue Jun 14 15:40:56 2011
+++ synctex\synctex_parser.c	Sat Feb 04 08:06:02 2012
@@ -1418,10 +1418,13 @@
 			/*  We have current_size+len+1<=UINT_MAX
 			 *  or equivalently new_size<UINT_MAX,
 			 *  where we have assumed that len<UINT_MAX */
 			if ((* value_ref = realloc(* value_ref,new_size+1)) != NULL) {
 				if (memcpy((*value_ref)+current_size,SYNCTEX_CUR,len)) {
+					/* SumatraPDF: fix reading files with DOS line endings*/
+					if (new_size > 0 && (*value_ref)[new_size - 1] == '\r')
+						new_size--;
 					(* value_ref)[new_size]='\0'; /*  Terminate the string */
 					SYNCTEX_CUR += len;/*  Advance to the terminating '\n' */
 					return SYNCTEX_STATUS_OK;
 				}
 				free(* value_ref);
@@ -4146,11 +4149,11 @@
 typedef int (*synctex_fprintf_t)(void *, const char * , ...); /*  print formatted to either FILE *  or gzFile */
 
 #   define SYNCTEX_BITS_PER_BYTE 8
 
 struct __synctex_updater_t {
-    void *file;                 /*  the foo.synctex or foo.synctex.gz I/O identifier  */
+    gzFile file;                /*  the foo.synctex or foo.synctex.gz I/O identifier  */
 	synctex_fprintf_t fprintf;  /*  either fprintf or gzprintf */
 	int length;                 /*  the number of chars appended */
     struct _flags {
         unsigned int no_gz:1;   /*  Whether zlib is used or not */
         unsigned int reserved:SYNCTEX_BITS_PER_BYTE*sizeof(int)-1; /*  Align */
diff -rPu5 synctex.orig\synctex_parser_utils.c synctex\synctex_parser_utils.c
--- synctex.orig\synctex_parser_utils.c	Tue Jun 14 10:23:56 2011
+++ synctex\synctex_parser_utils.c	Fri Aug 12 23:08:40 2011
@@ -166,10 +166,13 @@
 next_character:
 	if(SYNCTEX_IS_PATH_SEPARATOR(*lhs)) {/*  lhs points to a path separator */
 		if(!SYNCTEX_IS_PATH_SEPARATOR(*rhs)) {/*  but not rhs */
 			return synctex_NO;
 		}
+		/* SumatraPDF: ignore spurious "./" parts (caused by TeXlive 2011) */
+		lhs = synctex_ignore_leading_dot_slash(lhs + 1) - 1;
+		rhs = synctex_ignore_leading_dot_slash(rhs + 1) - 1;
 	} else if(SYNCTEX_IS_PATH_SEPARATOR(*rhs)) {/*  rhs points to a path separator but not lhs */
 		return synctex_NO;
 	} else if(toupper(*lhs) != toupper(*rhs)){/*  uppercase do not match */
 		return synctex_NO;
 	} else if (!*lhs) {/*  lhs is at the end of the string */
